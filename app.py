{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e111a196-d853-4103-8b0e-34d2e3997d43",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-05-30 13:21:00.589 \n",
      "  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n",
      "  command:\n",
      "\n",
      "    streamlit run C:\\Users\\marce\\anaconda3\\Lib\\site-packages\\ipykernel_launcher.py [ARGUMENTS]\n",
      "2025-05-30 13:21:00.589 Session state does not function when running a script without `streamlit run`\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import streamlit as st\n",
    "\n",
    "# Configuraci√≥n de la p√°gina\n",
    "st.set_page_config(page_title=\"Centro de Masas y Rigidez\", layout=\"wide\")\n",
    "st.title(\"üìä Calculadora de Centro de Masas (CM) y Centro de Rigidez (CR)\")\n",
    "\n",
    "# =====================================\n",
    "# DATOS DE ENTRADA (Interfaz de usuario)\n",
    "# =====================================\n",
    "st.sidebar.header(\"üîß Par√°metros de Entrada\")\n",
    "\n",
    "# Dimensiones de la planta\n",
    "Lx = st.sidebar.number_input(\"Longitud en X (m)\", min_value=1.0, value=12.0)\n",
    "Ly = st.sidebar.number_input(\"Longitud en Y (m)\", min_value=1.0, value=8.0)\n",
    "\n",
    "# Propiedades de los materiales\n",
    "densidad_concreto = st.sidebar.number_input(\"Densidad del concreto (kg/m¬≥)\", min_value=1000, value=2400)\n",
    "E = st.sidebar.number_input(\"M√≥dulo de elasticidad (ton/m¬≤)\", min_value=1e5, value=2e6)\n",
    "h = st.sidebar.number_input(\"Altura del entrepiso (m)\", min_value=1.0, value=3.0)\n",
    "carga_losa = st.sidebar.number_input(\"Carga de la losa (kg/m¬≤)\", min_value=100, value=500)\n",
    "\n",
    "# =====================================\n",
    "# C√ÅLCULOS (Funciones anteriores)\n",
    "# =====================================\n",
    "def calcular_centro_masas(muros, columnas):\n",
    "    # Masa de la losa\n",
    "    area_losa = Lx * Ly\n",
    "    masa_losa = area_losa * carga_losa\n",
    "    cm_losa = (Lx/2, Ly/2)\n",
    "\n",
    "    # Masa de los muros\n",
    "    masa_muros = []\n",
    "    for muro in muros:\n",
    "        volumen = muro[\"L\"] * muro[\"t\"] * h\n",
    "        masa = volumen * densidad_concreto\n",
    "        masa_muros.append({\"masa\": masa, \"x\": muro[\"x\"], \"y\": muro[\"y\"]})\n",
    "\n",
    "    # Masa de las columnas\n",
    "    masa_columnas = []\n",
    "    for col in columnas:\n",
    "        volumen = col[\"a\"] * col[\"b\"] * h\n",
    "        masa = volumen * densidad_concreto\n",
    "        masa_columnas.append({\"masa\": masa, \"x\": col[\"x\"], \"y\": col[\"y\"]})\n",
    "\n",
    "    # Suma total de masas\n",
    "    masa_total = masa_losa + sum(m[\"masa\"] for m in masa_muros) + sum(m[\"masa\"] for m in masa_columnas)\n",
    "    sum_mx = masa_losa * cm_losa[0] + sum(m[\"masa\"] * m[\"x\"] for m in masa_muros) + sum(m[\"masa\"] * m[\"x\"] for m in masa_columnas)\n",
    "    sum_my = masa_losa * cm_losa[1] + sum(m[\"masa\"] * m[\"y\"] for m in masa_muros) + sum(m[\"masa\"] * m[\"y\"] for m in masa_columnas)\n",
    "\n",
    "    # Coordenadas del CM\n",
    "    cm_x = sum_mx / masa_total\n",
    "    cm_y = sum_my / masa_total\n",
    "    return cm_x, cm_y\n",
    "\n",
    "def calcular_centro_rigidez(muros, columnas):\n",
    "    # Rigidez de los muros (k = 3EI/h¬≥)\n",
    "    rigidez_muros = []\n",
    "    for muro in muros:\n",
    "        if muro[\"dir\"] == \"Y\":\n",
    "            I = (muro[\"t\"] * muro[\"L\"]**3) / 12\n",
    "        else:\n",
    "            I = (muro[\"L\"] * muro[\"t\"]**3) / 12\n",
    "        k = (3 * E * I) / h**3\n",
    "        rigidez_muros.append({\"k\": k, \"x\": muro[\"x\"], \"y\": muro[\"y\"], \"dir\": muro[\"dir\"]})\n",
    "\n",
    "    # Rigidez de las columnas\n",
    "    rigidez_columnas = []\n",
    "    for col in columnas:\n",
    "        Ix = (col[\"a\"] * col[\"b\"]**3) / 12\n",
    "        Iy = (col[\"b\"] * col[\"a\"]**3) / 12\n",
    "        kx = (3 * E * Ix) / h**3\n",
    "        ky = (3 * E * Iy) / h**3\n",
    "        rigidez_columnas.append({\"kx\": kx, \"ky\": ky, \"x\": col[\"x\"], \"y\": col[\"y\"]})\n",
    "\n",
    "    # Suma de rigideces\n",
    "    sum_kx = sum(m[\"k\"] for m in rigidez_muros if m[\"dir\"] == \"X\") + sum(c[\"kx\"] for c in rigidez_columnas)\n",
    "    sum_ky = sum(m[\"k\"] for m in rigidez_muros if m[\"dir\"] == \"Y\") + sum(c[\"ky\"] for c in rigidez_columnas)\n",
    "\n",
    "    # Centro de Rigidez (CR)\n",
    "    cr_x = sum(m[\"k\"] * m[\"x\"] for m in rigidez_muros if m[\"dir\"] == \"Y\") + sum(c[\"ky\"] * c[\"x\"] for c in rigidez_columnas)\n",
    "    cr_x /= sum_ky if sum_ky != 0 else 1  # Evitar divisi√≥n por cero\n",
    "\n",
    "    cr_y = sum(m[\"k\"] * m[\"y\"] for m in rigidez_muros if m[\"dir\"] == \"X\") + sum(c[\"kx\"] * c[\"y\"] for c in rigidez_columnas)\n",
    "    cr_y /= sum_kx if sum_kx != 0 else 1\n",
    "    return cr_x, cr_y\n",
    "\n",
    "def graficar_estructura(muros, columnas, cm_x, cm_y, cr_x, cr_y):\n",
    "    fig, ax = plt.subplots(figsize=(10, 6))\n",
    "    \n",
    "    # Dibujar muros\n",
    "    for muro in muros:\n",
    "        if muro[\"dir\"] == \"Y\":\n",
    "            ax.plot([muro[\"x\"], muro[\"x\"]], [muro[\"y\"] - muro[\"L\"]/2, muro[\"y\"] + muro[\"L\"]/2], 'b-', linewidth=3)\n",
    "        else:\n",
    "            ax.plot([muro[\"x\"] - muro[\"L\"]/2, muro[\"x\"] + muro[\"L\"]/2], [muro[\"y\"], muro[\"y\"]], 'b-', linewidth=3)\n",
    "\n",
    "    # Dibujar columnas\n",
    "    for col in columnas:\n",
    "        ax.plot(col[\"x\"], col[\"y\"], 'ks', markersize=10)\n",
    "\n",
    "    # Dibujar CM y CR\n",
    "    ax.plot(cm_x, cm_y, 'ro', markersize=8, label='Centro de Masas (CM)')\n",
    "    ax.plot(cr_x, cr_y, 'go', markersize=8, label='Centro de Rigidez (CR)')\n",
    "\n",
    "    # Configuraci√≥n del gr√°fico\n",
    "    ax.set_xlim(0, Lx)\n",
    "    ax.set_ylim(0, Ly)\n",
    "    ax.grid(True)\n",
    "    ax.set_xlabel(\"Eje X (m)\")\n",
    "    ax.set_ylabel(\"Eje Y (m)\")\n",
    "    ax.set_title(\"Planta Estructural - Centro de Masas y Rigidez\")\n",
    "    ax.legend()\n",
    "    ax.set_aspect('equal')\n",
    "    st.pyplot(fig)\n",
    "\n",
    "# =====================================\n",
    "# INTERFAZ DE USUARIO PARA Muros/Columnas\n",
    "# =====================================\n",
    "st.sidebar.header(\"üèóÔ∏è Configuraci√≥n de Muros y Columnas\")\n",
    "\n",
    "# Ejemplo predeterminado (puede ser editado)\n",
    "muros = [\n",
    "    {\"L\": 4, \"t\": 0.25, \"x\": 2, \"y\": 4, \"dir\": \"Y\"},\n",
    "    {\"L\": 4, \"t\": 0.25, \"x\": 6, \"y\": 4, \"dir\": \"Y\"},\n",
    "    {\"L\": 6, \"t\": 0.25, \"x\": 6, \"y\": 4, \"dir\": \"X\"},\n",
    "]\n",
    "\n",
    "columnas = [\n",
    "    {\"a\": 0.4, \"b\": 0.4, \"x\": 1, \"y\": 1},\n",
    "    {\"a\": 0.4, \"b\": 0.4, \"x\": 11, \"y\": 1},\n",
    "    {\"a\": 0.4, \"b\": 0.4, \"x\": 11, \"y\": 7},\n",
    "    {\"a\": 0.4, \"b\": 0.4, \"x\": 1, \"y\": 7},\n",
    "]\n",
    "\n",
    "# Bot√≥n para calcular\n",
    "if st.sidebar.button(\"Calcular CM y CR\"):\n",
    "    cm_x, cm_y = calcular_centro_masas(muros, columnas)\n",
    "    cr_x, cr_y = calcular_centro_rigidez(muros, columnas)\n",
    "\n",
    "    st.success(\"‚úÖ C√°lculos completados!\")\n",
    "    st.write(f\"**Centro de Masas (CM):** ({cm_x:.2f}, {cm_y:.2f}) m\")\n",
    "    st.write(f\"**Centro de Rigidez (CR):** ({cr_x:.2f}, {cr_y:.2f}) m\")\n",
    "    st.write(f\"**Excentricidad en X:** {abs(cm_x - cr_x):.2f} m\")\n",
    "    st.write(f\"**Excentricidad en Y:** {abs(cm_y - cr_y):.2f} m\")\n",
    "\n",
    "    graficar_estructura(muros, columnas, cm_x, cm_y, cr_x, cr_y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": none,
   "id": "203c739d-d250-4248-9855-b36f35dd8488",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
